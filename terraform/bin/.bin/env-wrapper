#!/bin/bash

set -euo pipefail

die() {
    echo >&2 "$@"
    exit 1
}

print_usage() {
    die "usage: $0 [plan|apply|show|console|refresh|destroy|output[ output-name]|taint resource-name|untaint resource-name]"
}

[ "$#" -eq 0 ] && print_usage

# Set up variables
terraform init

bin_name=$(basename $0)
bin_components=(${bin_name//-/ }) # Split binary name on a dash
num_components=${#bin_components[@]}

if [ ${num_components} -eq 2 ]
then
    env_name=${bin_components[0]}
    region=${bin_components[1]}
    state_file="$(pwd)/state/${env_name}-${region}.tfstate"
    var_file_flag="-var-file $(pwd)/multi-region-vars/${region}.tfvars"
else
    env_name=${bin_name}
    state_file="$(pwd)/state/${env_name}.tfstate"
    var_file_flag=""
fi

ssh_key_name="quorum-${env_name}"
ssh_key_path="secrets/ec2-keys/${ssh_key_name}.pem" # private key path
ssh_pubkey_path="secrets/ec2-keys/${ssh_key_name}.pub"
secret_tf_file="secrets/terraform.tfvars"
tunnel_key_name="tunnel"
tunnel_key_path="secrets/${tunnel_key_name}" # private key path

# Pre-processing/checks before processing command

check_for_aws_creds() {
    test -e "${secret_tf_file}"
}

check_ssh_key_exists() {
    test -e "${ssh_key_path}"
}

generate_ssh_key() {
    echo "generating ec2 SSH key: ${ssh_key_path}"
    # aws ec2 create-key-pair --key-name "${ssh_key_name}" | jq -r ".KeyMaterial" >"${ssh_key_path}"
    openssl genrsa -out "${ssh_key_path}" 2048
    chmod 400 "${ssh_key_path}"
    ssh-keygen -y -f "${ssh_key_path}" >"${ssh_pubkey_path}"
}

ensure_ssh_key_added() {
    ssh-add "${ssh_key_path}" 2>/dev/null
}

check_tunnel_key_exists() {
    test -e "${tunnel_key_path}"
}

generate_tunnel_key() {
    echo "generating tunnel SSH key: ${tunnel_key_path}"
    ssh-keygen -t ed25519 -N "" -C "quorum ssh tunnels" -f "${tunnel_key_path}"
}

check_for_aws_creds || die "please create the file secrets/terraform.fvars. see secrets/terraform.tfvars.example for an example."

if [[ "${env_name}" != "global" ]]
then
    check_ssh_key_exists || generate_ssh_key
    ensure_ssh_key_added
fi

check_tunnel_key_exists || generate_tunnel_key

# Process command

if [[ "${env_name}" == "global" ]]
then
    cd global
fi

if [[ "$1" == "plan" || "$1" == "apply" || "$1" == "destroy" || "$1" == "console" || "$1" == "refresh" ]]
then
    terraform $1 -var "env=${env_name}" ${var_file_flag} -state ${state_file}
elif [[ "$1" == "output" || "$1" == "taint" || "$1" == "untaint" ]]
then
    if [[ "$#" -ne 2 ]]
    then
        print_usage
    else
        terraform $1 -state ${state_file} $2
    fi
elif [[ "$1" == "show" ]]
then
    terraform show ${state_file}
else
    print_usage
fi
